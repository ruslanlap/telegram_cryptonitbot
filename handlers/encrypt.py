# handlers/encrypt.py
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from states import EncryptStates
from keyboards import create_main_menu
from utils.encryption import encrypt, escape_markdown_v2
from utils.s3_upload import upload_file_to_s3
import os
import io

MAX_MESSAGE_LENGTH = 250

async def encrypt_command(message: types.Message):
    await message.reply("üîí –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
    await EncryptStates.waiting_for_password.set()

async def get_password_for_encryption(message: types.Message, state: FSMContext):
    password = message.text.strip()
    if not password:
        await message.reply("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    await state.update_data(password=password)
    await message.reply(f"üìß –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–¥–æ {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤):")
    await EncryptStates.waiting_for_message.set()

async def encrypt_message_handler(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if len(text) > MAX_MESSAGE_LENGTH:
        await message.reply(f"‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–º–µ–∂—Ç–µ –π–æ–≥–æ –¥–æ {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    data = await state.get_data()
    password = data.get('password')
    encrypted = encrypt(text, password)
    escaped_encrypted = escape_markdown_v2(encrypted)
    response = f"üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{escaped_encrypted}"
    await message.reply(response, reply_markup=create_main_menu())

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç —É —Ö–º–∞—Ä–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
    file_content = f"Password: {password}\n\nEncrypted Message:\n{encrypted}\n\n"
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π, —è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
    if os.path.exists("Instructions.txt"):
        with open("Instructions.txt", 'r', encoding='utf-8') as instructions_file:
            file_content += instructions_file.read()
    else:
        # –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
        pass

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ S3
    from config import AWS_S3_BUCKET, s3_client  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
    s3_key = f"encrypted_messages/{message.from_user.id}/{message.message_id}_Encrypted_Message.txt"
    file_url = upload_file_to_s3(s3_client, AWS_S3_BUCKET, s3_key, file_content)
    if file_url:
        await message.reply_document(
            types.InputFile(io.BytesIO(file_content.encode('utf-8')), filename="Encrypted_Message.txt"),
            caption="üîê –í–∞—à–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞–∫–æ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ö–º–∞—Ä–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ."
        )
    else:
        await message.reply("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É —É —Ö–º–∞—Ä–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ.", reply_markup=create_main_menu())

    await state.finish()

def register_encrypt_handlers(dp: Dispatcher):
    dp.register_message_handler(encrypt_command, commands=['encrypt', 'e', 'encryptüîí'])
    dp.register_message_handler(get_password_for_encryption, state=EncryptStates.waiting_for_password, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(encrypt_message_handler, state=EncryptStates.waiting_for_message, content_types=types.ContentTypes.TEXT)
