# handlers/decrypt.py
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from states import DecryptStates
from keyboards import create_main_menu
from utils.encryption import decrypt, escape_markdown_v2
from utils.s3_upload import upload_file_to_s3, get_presigned_url  # Updated import
import io

MAX_MESSAGE_LENGTH = 250

# handlers/decrypt.py
# (–∫–æ–¥ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)

async def decrypt_command(message: types.Message):
    await message.reply("üîì –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
    await DecryptStates.waiting_for_password.set()

async def get_password_for_decryption(message: types.Message, state: FSMContext):
    password = message.text.strip()
    if not password:
        await message.reply("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    await state.update_data(password=password)
    await message.reply(f"üìß –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–¥–æ {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤):")
    await DecryptStates.waiting_for_encrypted_message.set()

async def decrypt_message_handler(message: types.Message, state: FSMContext):
    encrypted_text = message.text.strip()
    if len(encrypted_text) > MAX_MESSAGE_LENGTH:
        await message.reply(f"‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–º–µ–∂—Ç–µ –π–æ–≥–æ –¥–æ {MAX_MESSAGE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    data = await state.get_data()
    password = data.get('password')
    try:
        decrypted_text = decrypt(encrypted_text, password)
        escaped_message = escape_markdown_v2(decrypted_text)
        response = f"üîì –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n||{escaped_message}||"
        await message.reply(response, parse_mode='MarkdownV2', reply_markup=create_main_menu())
        file_content = f"–ü–∞—Ä–æ–ª—å: {password}\n\n–†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{decrypted_text}\n\n"
        from config import AWS_S3_BUCKET, s3_client
        s3_key = f"decrypted_messages/{message.from_user.id}/{message.message_id}_Decrypted_Message.txt"
        file_url = upload_file_to_s3(s3_client, AWS_S3_BUCKET, s3_key, file_content)
        if file_url:
            presigned_url = get_presigned_url(s3_client, AWS_S3_BUCKET, s3_key)
            if presigned_url:
                await message.reply(f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥—ñ–π—Å–Ω–µ –ø—Ä–æ—Ç—è–≥–æ–º 1 –≥–æ–¥–∏–Ω–∏):\n{presigned_url}", disable_web_page_preview=True)
            await message.reply_document(
                types.InputFile(io.BytesIO(file_content.encode('utf-8')), filename="Decrypted_Message.txt"),
                caption="üîì –í–∞—à–µ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞–∫–æ–∂ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ —Ö–º–∞—Ä–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ."
            )
        else:
            await message.reply("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ —Ö–º–∞—Ä–Ω–æ–º—É —Å—Ö–æ–≤–∏—â—ñ.", reply_markup=create_main_menu())
    except Exception as e:
        escaped_error = escape_markdown_v2(str(e))
        await message.reply(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {escaped_error}. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å —ñ —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ.", reply_markup=create_main_menu())
    await state.finish()


def register_decrypt_handlers(dp: Dispatcher):
    # –î–æ–¥–∞—î–º–æ —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    dp.register_message_handler(
        decrypt_command, 
        lambda message: message.text in ['/decrypt', 'd', '/decryptüîì', 'decryptüîì']
    )
    
    dp.register_message_handler(
        get_password_for_decryption,
        state=DecryptStates.waiting_for_password,
        content_types=types.ContentTypes.TEXT
    )
    
    dp.register_message_handler(
        decrypt_message_handler,
        state=DecryptStates.waiting_for_encrypted_message,
        content_types=types.ContentTypes.TEXT
    )
    dp.register_message_handler(decrypt_command, commands=['decrypt'], state='*')
    dp.register_message_handler(get_password_for_decryption, state=DecryptStates.waiting_for_password)
    dp.register_message_handler(decrypt_message_handler, state=DecryptStates.waiting_for_encrypted_message)