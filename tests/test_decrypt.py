# tests/test_decrypt.py
import pytest
from aiogram import types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.utils.exceptions import TelegramAPIError
from handlers.decrypt import register_decrypt_handlers, decrypt_command, get_password_for_decryption, decrypt_message_handler
from states import DecryptStates
from unittest.mock import AsyncMock

@pytest.mark.asyncio
async def test_decrypt_command(dp):
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    register_decrypt_handlers(dp)

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message = AsyncMock(spec=types.Message)
    message.reply = AsyncMock()
    message.text = '/decrypt'

    # –í–∏–∫–ª–∏–∫ –∫–æ–º–∞–Ω–¥–∏
    await decrypt_command(message)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    message.reply.assert_awaited_with("üîì –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")

@pytest.mark.asyncio
async def test_get_password_for_decryption_valid(dp):
    register_decrypt_handlers(dp)

    message = AsyncMock(spec=types.Message)
    message.reply = AsyncMock()
    message.text = 'valid_password'

    state = AsyncMock()

    await get_password_for_decryption(message, state)

    state.update_data.assert_awaited_with(password='valid_password')
    message.reply.assert_awaited_with(
        "üìß –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è (–¥–æ 250 —Å–∏–º–≤–æ–ª—ñ–≤):"
    )

@pytest.mark.asyncio
async def test_get_password_for_decryption_empty(dp):
    register_decrypt_handlers(dp)

    message = AsyncMock(spec=types.Message)
    message.reply = AsyncMock()
    message.text = '   '  # –ü–æ—Ä–æ–∂–Ω—ñ–π –ø–∞—Ä–æ–ª—å

    state = AsyncMock()

    await get_password_for_decryption(message, state)

    state.update_data.assert_not_awaited()
    message.reply.assert_awaited_with(
        "‚ö†Ô∏è –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:"
    )

@pytest.mark.asyncio
async def test_decrypt_message_handler_success(dp, mock_upload_file_to_s3, mock_decrypt, mock_escape_markdown_v2):
    register_decrypt_handlers(dp)

    message = AsyncMock(spec=types.Message)
    message.reply = AsyncMock()
    message.reply_document = AsyncMock()
    message.text = 'encrypted_text'
    message.from_user.id = 123456
    message.message_id = 789
    message.reply_document = AsyncMock()

    state = AsyncMock()
    state.get_data = AsyncMock(return_value={'password': 'valid_password'})

    await decrypt_message_handler(message, state)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ–π
    mock_decrypt.assert_called_with('encrypted_text', 'valid_password')
    mock_escape_markdown_v2.assert_called_with('Decrypted message')
    mock_upload_file_to_s3.assert_called()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    message.reply.assert_any_await(
        "üîì –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n||Decrypted message||",
        parse_mode='MarkdownV2',
        reply_markup=AsyncMock()
    )
    message.reply.assert_any_await(
        "üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥—ñ–π—Å–Ω–µ 1 –≥–æ–¥–∏–Ω—É):\nhttps://cryptonitbot.s3.amazonaws.com/decrypted_messages/test.txt",
        disable_web_page_preview=True
    )
    message.reply_document.assert_awaited()

@pytest.mark.asyncio
async def test_decrypt_message_handler_encrypted_text_too_long(dp):
    register_decrypt_handlers(dp)

    message = AsyncMock(spec=types.Message)
    message.reply = AsyncMock()
    message.text = 'a' * 251  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ–≤—à–µ 250 —Å–∏–º–≤–æ–ª—ñ–≤

    state = AsyncMock()

    await decrypt_message_handler(message, state)

    message.reply.assert_awaited_with(
        "‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–º–µ–∂—Ç–µ –π–æ–≥–æ –¥–æ 250 —Å–∏–º–≤–æ–ª—ñ–≤."
    )

@pytest.mark.asyncio
async def test_decrypt_message_handler_decryption_error(dp, mock_upload_file_to_s3, mock_decrypt, mock_escape_markdown_v2):
    register_decrypt_handlers(dp)

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–∫-—Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–º–∏–ª–∫–∏
    mock_decrypt.side_effect = Exception("Decryption failed")

    message = AsyncMock(spec=types.Message)
    message.reply = AsyncMock()
    message.text = 'encrypted_text'
    message.from_user.id = 123456
    message.message_id = 789

    state = AsyncMock()
    state.get_data = AsyncMock(return_value={'password': 'invalid_password'})

    await decrypt_message_handler(message, state)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ–π
    mock_decrypt.assert_called_with('encrypted_text', 'invalid_password')
    mock_escape_markdown_v2.assert_called_with('Decryption failed')

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –ø–æ–º–∏–ª–∫–æ—é
    message.reply.assert_awaited_with(
        "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: Decryption failed. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.",
        reply_markup=AsyncMock()
    )
